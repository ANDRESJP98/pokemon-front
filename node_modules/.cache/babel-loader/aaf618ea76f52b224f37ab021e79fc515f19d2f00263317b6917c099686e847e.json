{"ast":null,"code":"import{ReactReduxContext}from'../components/Context';import{useStore as useDefaultStore,createStoreHook}from'./useStore';/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */export function createDispatchHook(context){if(context===void 0){context=ReactReduxContext;}var useStore=context===ReactReduxContext?useDefaultStore:createStoreHook(context);return function useDispatch(){var store=useStore();return store.dispatch;};}/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */export var useDispatch=/*#__PURE__*/createDispatchHook();","map":{"version":3,"names":["ReactReduxContext","useStore","useDefaultStore","createStoreHook","createDispatchHook","context","useDispatch","store","dispatch"],"sources":["C:/Users/ACER/Downloads/POKEMON-FRONT/src/node_modules/react-redux/es/hooks/useDispatch.js"],"sourcesContent":["import { ReactReduxContext } from '../components/Context';\nimport { useStore as useDefaultStore, createStoreHook } from './useStore';\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\n\nexport function createDispatchHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useStore = context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\n\nexport var useDispatch = /*#__PURE__*/createDispatchHook();"],"mappings":"AAAA,OAASA,iBAAiB,KAAQ,uBAAuB,CACzD,OAASC,QAAQ,GAAI,CAAAC,eAAe,CAAEC,eAAe,KAAQ,YAAY,CACzE;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAAS,CAAAC,kBAAkBA,CAACC,OAAO,CAAE,CAC1C,GAAIA,OAAO,GAAK,IAAK,EAAC,CAAE,CACtBA,OAAO,CAAGL,iBAAiB,CAC7B,CAEA,GAAI,CAAAC,QAAQ,CAAGI,OAAO,GAAKL,iBAAiB,CAAGE,eAAe,CAAGC,eAAe,CAACE,OAAO,CAAC,CACzF,MAAO,SAAS,CAAAC,WAAWA,CAAA,CAAG,CAC5B,GAAI,CAAAC,KAAK,CAAGN,QAAQ,CAAC,CAAC,CACtB,MAAO,CAAAM,KAAK,CAACC,QAAQ,CACvB,CAAC,CACH,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,IAAI,CAAAF,WAAW,CAAG,aAAaF,kBAAkB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}