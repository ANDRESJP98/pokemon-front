{"ast":null,"code":"/** A function that accepts a potential \"extra argument\" value to be injected later,\r\n * and returns an instance of the thunk middleware that uses that value\r\n */function createThunkMiddleware(extraArgument){// Standard Redux middleware definition pattern:\n// See: https://redux.js.org/tutorials/fundamentals/part-4-store#writing-custom-middleware\nvar middleware=function middleware(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){// The thunk middleware looks for any functions that were passed to `store.dispatch`.\n// If this \"action\" is really a function, call it and return the result.\nif(typeof action==='function'){// Inject the store's `dispatch` and `getState` methods, as well as any \"extra arg\"\nreturn action(dispatch,getState,extraArgument);}// Otherwise, pass the action down the middleware chain as usual\nreturn next(action);};};};return middleware;}var thunk=createThunkMiddleware();// Attach the factory function so users can create a customized version\n// with whatever \"extra arg\" they want to inject into their thunks\nthunk.withExtraArgument=createThunkMiddleware;export default thunk;","map":{"version":3,"names":["createThunkMiddleware","extraArgument","middleware","_ref","dispatch","getState","next","action","thunk","withExtraArgument"],"sources":["C:/Users/ACER/Downloads/POKEMON-FRONT/src/node_modules/redux-thunk/es/index.js"],"sourcesContent":["/** A function that accepts a potential \"extra argument\" value to be injected later,\r\n * and returns an instance of the thunk middleware that uses that value\r\n */\nfunction createThunkMiddleware(extraArgument) {\n  // Standard Redux middleware definition pattern:\n  // See: https://redux.js.org/tutorials/fundamentals/part-4-store#writing-custom-middleware\n  var middleware = function middleware(_ref) {\n    var dispatch = _ref.dispatch,\n        getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        // The thunk middleware looks for any functions that were passed to `store.dispatch`.\n        // If this \"action\" is really a function, call it and return the result.\n        if (typeof action === 'function') {\n          // Inject the store's `dispatch` and `getState` methods, as well as any \"extra arg\"\n          return action(dispatch, getState, extraArgument);\n        } // Otherwise, pass the action down the middleware chain as usual\n\n\n        return next(action);\n      };\n    };\n  };\n\n  return middleware;\n}\n\nvar thunk = createThunkMiddleware(); // Attach the factory function so users can create a customized version\n// with whatever \"extra arg\" they want to inject into their thunks\n\nthunk.withExtraArgument = createThunkMiddleware;\nexport default thunk;"],"mappings":"AAAA;AACA;AACA,GACA,QAAS,CAAAA,qBAAqBA,CAACC,aAAa,CAAE,CAC5C;AACA;AACA,GAAI,CAAAC,UAAU,CAAG,QAAS,CAAAA,UAAUA,CAACC,IAAI,CAAE,CACzC,GAAI,CAAAC,QAAQ,CAAGD,IAAI,CAACC,QAAQ,CACxBC,QAAQ,CAAGF,IAAI,CAACE,QAAQ,CAC5B,MAAO,UAAUC,IAAI,CAAE,CACrB,MAAO,UAAUC,MAAM,CAAE,CACvB;AACA;AACA,GAAI,MAAO,CAAAA,MAAM,GAAK,UAAU,CAAE,CAChC;AACA,MAAO,CAAAA,MAAM,CAACH,QAAQ,CAAEC,QAAQ,CAAEJ,aAAa,CAAC,CAClD,CAAE;AAGF,MAAO,CAAAK,IAAI,CAACC,MAAM,CAAC,CACrB,CAAC,CACH,CAAC,CACH,CAAC,CAED,MAAO,CAAAL,UAAU,CACnB,CAEA,GAAI,CAAAM,KAAK,CAAGR,qBAAqB,CAAC,CAAC,CAAE;AACrC;AAEAQ,KAAK,CAACC,iBAAiB,CAAGT,qBAAqB,CAC/C,cAAe,CAAAQ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}