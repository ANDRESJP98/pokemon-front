{"ast":null,"code":"import { ReactReduxContext } from '../components/Context';\nimport { useStore as useDefaultStore, createStoreHook } from './useStore';\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\n\nexport function createDispatchHook(context) {\n  var _s = $RefreshSig$();\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n  var useStore = context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return _s(function useDispatch() {\n    _s();\n    var store = useStore();\n    return store.dispatch;\n  }, \"lacCqcEtsbxX3PAG/fPlTuRiPg0=\", false, function () {\n    return [useStore];\n  });\n}\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\n\nexport var useDispatch = /*#__PURE__*/createDispatchHook();","map":{"version":3,"names":["ReactReduxContext","useStore","useDefaultStore","createStoreHook","createDispatchHook","context","_s","$RefreshSig$","useDispatch","store","dispatch"],"sources":["C:/Users/ACER/Downloads/POKEMON-FRONT/src/node_modules/react-redux/es/hooks/useDispatch.js"],"sourcesContent":["import { ReactReduxContext } from '../components/Context';\nimport { useStore as useDefaultStore, createStoreHook } from './useStore';\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\n\nexport function createDispatchHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useStore = context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\n\nexport var useDispatch = /*#__PURE__*/createDispatchHook();"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,uBAAuB;AACzD,SAASC,QAAQ,IAAIC,eAAe,EAAEC,eAAe,QAAQ,YAAY;AACzE;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAkBA,CAACC,OAAO,EAAE;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAC1C,IAAIF,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAGL,iBAAiB;EAC7B;EAEA,IAAIC,QAAQ,GAAGI,OAAO,KAAKL,iBAAiB,GAAGE,eAAe,GAAGC,eAAe,CAACE,OAAO,CAAC;EACzF,OAAAC,EAAA,CAAO,SAASE,WAAWA,CAAA,EAAG;IAAAF,EAAA;IAC5B,IAAIG,KAAK,GAAGR,QAAQ,CAAC,CAAC;IACtB,OAAOQ,KAAK,CAACC,QAAQ;EACvB,CAAC;IAAA,QAFaT,QAAQ;EAAA;AAGxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIO,WAAW,GAAG,aAAaJ,kBAAkB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}