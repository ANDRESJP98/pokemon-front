{"ast":null,"code":"import _objectSpread from'@babel/runtime/helpers/esm/objectSpread2';/**\n * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js\n *\n * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes\n * during build.\n * @param {number} code\n */function formatProdErrorMessage(code){return\"Minified Redux error #\"+code+\"; visit https://redux.js.org/Errors?code=\"+code+\" for the full message or \"+'use the non-minified dev environment for full errors. ';}// Inlined version of the `symbol-observable` polyfill\nvar $$observable=function(){return typeof Symbol==='function'&&Symbol.observable||'@@observable';}();/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */var randomString=function randomString(){return Math.random().toString(36).substring(7).split('').join('.');};var ActionTypes={INIT:\"@@redux/INIT\"+randomString(),REPLACE:\"@@redux/REPLACE\"+randomString(),PROBE_UNKNOWN_ACTION:function PROBE_UNKNOWN_ACTION(){return\"@@redux/PROBE_UNKNOWN_ACTION\"+randomString();}};/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */function isPlainObject(obj){if(typeof obj!=='object'||obj===null)return false;var proto=obj;while(Object.getPrototypeOf(proto)!==null){proto=Object.getPrototypeOf(proto);}return Object.getPrototypeOf(obj)===proto;}// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of\nfunction miniKindOf(val){if(val===void 0)return'undefined';if(val===null)return'null';var type=typeof val;switch(type){case'boolean':case'string':case'number':case'symbol':case'function':{return type;}}if(Array.isArray(val))return'array';if(isDate(val))return'date';if(isError(val))return'error';var constructorName=ctorName(val);switch(constructorName){case'Symbol':case'Promise':case'WeakMap':case'WeakSet':case'Map':case'Set':return constructorName;}// other\nreturn type.slice(8,-1).toLowerCase().replace(/\\s/g,'');}function ctorName(val){return typeof val.constructor==='function'?val.constructor.name:null;}function isError(val){return val instanceof Error||typeof val.message==='string'&&val.constructor&&typeof val.constructor.stackTraceLimit==='number';}function isDate(val){if(val instanceof Date)return true;return typeof val.toDateString==='function'&&typeof val.getDate==='function'&&typeof val.setDate==='function';}function kindOf(val){var typeOfVal=typeof val;if(process.env.NODE_ENV!=='production'){typeOfVal=miniKindOf(val);}return typeOfVal;}/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */function createStore(reducer,preloadedState,enhancer){var _ref2;if(typeof preloadedState==='function'&&typeof enhancer==='function'||typeof enhancer==='function'&&typeof arguments[3]==='function'){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(0):'It looks like you are passing several store enhancers to '+'createStore(). This is not supported. Instead, compose them '+'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');}if(typeof preloadedState==='function'&&typeof enhancer==='undefined'){enhancer=preloadedState;preloadedState=undefined;}if(typeof enhancer!=='undefined'){if(typeof enhancer!=='function'){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(1):\"Expected the enhancer to be a function. Instead, received: '\"+kindOf(enhancer)+\"'\");}return enhancer(createStore)(reducer,preloadedState);}if(typeof reducer!=='function'){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(2):\"Expected the root reducer to be a function. Instead, received: '\"+kindOf(reducer)+\"'\");}var currentReducer=reducer;var currentState=preloadedState;var currentListeners=[];var nextListeners=currentListeners;var isDispatching=false;/**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */function ensureCanMutateNextListeners(){if(nextListeners===currentListeners){nextListeners=currentListeners.slice();}}/**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */function getState(){if(isDispatching){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(3):'You may not call store.getState() while the reducer is executing. '+'The reducer has already received the state as an argument. '+'Pass it down from the top reducer instead of reading it from the store.');}return currentState;}/**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */function subscribe(listener){if(typeof listener!=='function'){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(4):\"Expected the listener to be a function. Instead, received: '\"+kindOf(listener)+\"'\");}if(isDispatching){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(5):'You may not call store.subscribe() while the reducer is executing. '+'If you would like to be notified after the store has been updated, subscribe from a '+'component and invoke store.getState() in the callback to access the latest state. '+'See https://redux.js.org/api/store#subscribelistener for more details.');}var isSubscribed=true;ensureCanMutateNextListeners();nextListeners.push(listener);return function unsubscribe(){if(!isSubscribed){return;}if(isDispatching){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(6):'You may not unsubscribe from a store listener while the reducer is executing. '+'See https://redux.js.org/api/store#subscribelistener for more details.');}isSubscribed=false;ensureCanMutateNextListeners();var index=nextListeners.indexOf(listener);nextListeners.splice(index,1);currentListeners=null;};}/**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */function dispatch(action){if(!isPlainObject(action)){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(7):\"Actions must be plain objects. Instead, the actual type was: '\"+kindOf(action)+\"'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.\");}if(typeof action.type==='undefined'){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(8):'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.');}if(isDispatching){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(9):'Reducers may not dispatch actions.');}try{isDispatching=true;currentState=currentReducer(currentState,action);}finally{isDispatching=false;}var listeners=currentListeners=nextListeners;for(var i=0;i<listeners.length;i++){var listener=listeners[i];listener();}return action;}/**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */function replaceReducer(nextReducer){if(typeof nextReducer!=='function'){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(10):\"Expected the nextReducer to be a function. Instead, received: '\"+kindOf(nextReducer));}currentReducer=nextReducer;// This action has a similiar effect to ActionTypes.INIT.\n// Any reducers that existed in both the new and old rootReducer\n// will receive the previous state. This effectively populates\n// the new state tree with any relevant data from the old one.\ndispatch({type:ActionTypes.REPLACE});}/**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */function observable(){var _ref;var outerSubscribe=subscribe;return _ref={/**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */subscribe:function subscribe(observer){if(typeof observer!=='object'||observer===null){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(11):\"Expected the observer to be an object. Instead, received: '\"+kindOf(observer)+\"'\");}function observeState(){if(observer.next){observer.next(getState());}}observeState();var unsubscribe=outerSubscribe(observeState);return{unsubscribe:unsubscribe};}},_ref[$$observable]=function(){return this;},_ref;}// When a store is created, an \"INIT\" action is dispatched so that every\n// reducer returns their initial state. This effectively populates\n// the initial state tree.\ndispatch({type:ActionTypes.INIT});return _ref2={dispatch:dispatch,subscribe:subscribe,getState:getState,replaceReducer:replaceReducer},_ref2[$$observable]=observable,_ref2;}/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */var legacy_createStore=createStore;/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */function warning(message){/* eslint-disable no-console */if(typeof console!=='undefined'&&typeof console.error==='function'){console.error(message);}/* eslint-enable no-console */try{// This error was thrown as a convenience so that if you enable\n// \"break on all exceptions\" in your console,\n// it would pause the execution at this line.\nthrow new Error(message);}catch(e){}// eslint-disable-line no-empty\n}function getUnexpectedStateShapeWarningMessage(inputState,reducers,action,unexpectedKeyCache){var reducerKeys=Object.keys(reducers);var argumentName=action&&action.type===ActionTypes.INIT?'preloadedState argument passed to createStore':'previous state received by the reducer';if(reducerKeys.length===0){return'Store does not have a valid reducer. Make sure the argument passed '+'to combineReducers is an object whose values are reducers.';}if(!isPlainObject(inputState)){return\"The \"+argumentName+\" has unexpected type of \\\"\"+kindOf(inputState)+\"\\\". Expected argument to be an object with the following \"+(\"keys: \\\"\"+reducerKeys.join('\", \"')+\"\\\"\");}var unexpectedKeys=Object.keys(inputState).filter(function(key){return!reducers.hasOwnProperty(key)&&!unexpectedKeyCache[key];});unexpectedKeys.forEach(function(key){unexpectedKeyCache[key]=true;});if(action&&action.type===ActionTypes.REPLACE)return;if(unexpectedKeys.length>0){return\"Unexpected \"+(unexpectedKeys.length>1?'keys':'key')+\" \"+(\"\\\"\"+unexpectedKeys.join('\", \"')+\"\\\" found in \"+argumentName+\". \")+\"Expected to find one of the known reducer keys instead: \"+(\"\\\"\"+reducerKeys.join('\", \"')+\"\\\". Unexpected keys will be ignored.\");}}function assertReducerShape(reducers){Object.keys(reducers).forEach(function(key){var reducer=reducers[key];var initialState=reducer(undefined,{type:ActionTypes.INIT});if(typeof initialState==='undefined'){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(12):\"The slice reducer for key \\\"\"+key+\"\\\" returned undefined during initialization. \"+\"If the state passed to the reducer is undefined, you must \"+\"explicitly return the initial state. The initial state may \"+\"not be undefined. If you don't want to set a value for this reducer, \"+\"you can use null instead of undefined.\");}if(typeof reducer(undefined,{type:ActionTypes.PROBE_UNKNOWN_ACTION()})==='undefined'){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(13):\"The slice reducer for key \\\"\"+key+\"\\\" returned undefined when probed with a random type. \"+(\"Don't try to handle '\"+ActionTypes.INIT+\"' or other actions in \\\"redux/*\\\" \")+\"namespace. They are considered private. Instead, you must return the \"+\"current state for any unknown actions, unless it is undefined, \"+\"in which case you must return the initial state, regardless of the \"+\"action type. The initial state may not be undefined, but can be null.\");}});}/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */function combineReducers(reducers){var reducerKeys=Object.keys(reducers);var finalReducers={};for(var i=0;i<reducerKeys.length;i++){var key=reducerKeys[i];if(process.env.NODE_ENV!=='production'){if(typeof reducers[key]==='undefined'){warning(\"No reducer provided for key \\\"\"+key+\"\\\"\");}}if(typeof reducers[key]==='function'){finalReducers[key]=reducers[key];}}var finalReducerKeys=Object.keys(finalReducers);// This is used to make sure we don't warn about the same\n// keys multiple times.\nvar unexpectedKeyCache;if(process.env.NODE_ENV!=='production'){unexpectedKeyCache={};}var shapeAssertionError;try{assertReducerShape(finalReducers);}catch(e){shapeAssertionError=e;}return function combination(state,action){if(state===void 0){state={};}if(shapeAssertionError){throw shapeAssertionError;}if(process.env.NODE_ENV!=='production'){var warningMessage=getUnexpectedStateShapeWarningMessage(state,finalReducers,action,unexpectedKeyCache);if(warningMessage){warning(warningMessage);}}var hasChanged=false;var nextState={};for(var _i=0;_i<finalReducerKeys.length;_i++){var _key=finalReducerKeys[_i];var reducer=finalReducers[_key];var previousStateForKey=state[_key];var nextStateForKey=reducer(previousStateForKey,action);if(typeof nextStateForKey==='undefined'){var actionType=action&&action.type;throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(14):\"When called with an action of type \"+(actionType?\"\\\"\"+String(actionType)+\"\\\"\":'(unknown type)')+\", the slice reducer for key \\\"\"+_key+\"\\\" returned undefined. \"+\"To ignore an action, you must explicitly return the previous state. \"+\"If you want this reducer to hold no value, you can return null instead of undefined.\");}nextState[_key]=nextStateForKey;hasChanged=hasChanged||nextStateForKey!==previousStateForKey;}hasChanged=hasChanged||finalReducerKeys.length!==Object.keys(state).length;return hasChanged?nextState:state;};}function bindActionCreator(actionCreator,dispatch){return function(){return dispatch(actionCreator.apply(this,arguments));};}/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */function bindActionCreators(actionCreators,dispatch){if(typeof actionCreators==='function'){return bindActionCreator(actionCreators,dispatch);}if(typeof actionCreators!=='object'||actionCreators===null){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(16):\"bindActionCreators expected an object or a function, but instead received: '\"+kindOf(actionCreators)+\"'. \"+\"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");}var boundActionCreators={};for(var key in actionCreators){var actionCreator=actionCreators[key];if(typeof actionCreator==='function'){boundActionCreators[key]=bindActionCreator(actionCreator,dispatch);}}return boundActionCreators;}/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */function compose(){for(var _len=arguments.length,funcs=new Array(_len),_key=0;_key<_len;_key++){funcs[_key]=arguments[_key];}if(funcs.length===0){return function(arg){return arg;};}if(funcs.length===1){return funcs[0];}return funcs.reduce(function(a,b){return function(){return a(b.apply(void 0,arguments));};});}/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */function applyMiddleware(){for(var _len=arguments.length,middlewares=new Array(_len),_key=0;_key<_len;_key++){middlewares[_key]=arguments[_key];}return function(createStore){return function(){var store=createStore.apply(void 0,arguments);var _dispatch=function dispatch(){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(15):'Dispatching while constructing your middleware is not allowed. '+'Other middleware would not be applied to this dispatch.');};var middlewareAPI={getState:store.getState,dispatch:function dispatch(){return _dispatch.apply(void 0,arguments);}};var chain=middlewares.map(function(middleware){return middleware(middlewareAPI);});_dispatch=compose.apply(void 0,chain)(store.dispatch);return _objectSpread(_objectSpread({},store),{},{dispatch:_dispatch});};};}export{ActionTypes as __DO_NOT_USE__ActionTypes,applyMiddleware,bindActionCreators,combineReducers,compose,createStore,legacy_createStore};","map":{"version":3,"names":["_objectSpread","formatProdErrorMessage","code","$$observable","Symbol","observable","randomString","Math","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","isPlainObject","obj","proto","Object","getPrototypeOf","miniKindOf","val","type","Array","isArray","isDate","isError","constructorName","ctorName","slice","toLowerCase","replace","constructor","name","Error","message","stackTraceLimit","Date","toDateString","getDate","setDate","kindOf","typeOfVal","process","env","NODE_ENV","createStore","reducer","preloadedState","enhancer","_ref2","arguments","undefined","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","getState","subscribe","listener","isSubscribed","push","unsubscribe","index","indexOf","splice","dispatch","action","listeners","i","length","replaceReducer","nextReducer","_ref","outerSubscribe","observer","observeState","next","legacy_createStore","warning","console","error","e","getUnexpectedStateShapeWarningMessage","inputState","reducers","unexpectedKeyCache","reducerKeys","keys","argumentName","unexpectedKeys","filter","key","hasOwnProperty","forEach","assertReducerShape","initialState","combineReducers","finalReducers","finalReducerKeys","shapeAssertionError","combination","state","warningMessage","hasChanged","nextState","_i","_key","previousStateForKey","nextStateForKey","actionType","String","bindActionCreator","actionCreator","apply","bindActionCreators","actionCreators","boundActionCreators","compose","_len","funcs","arg","reduce","a","b","applyMiddleware","middlewares","store","_dispatch","middlewareAPI","chain","map","middleware","__DO_NOT_USE__ActionTypes"],"sources":["C:/Users/ACER/Downloads/POKEMON-FRONT/src/node_modules/redux/es/redux.js"],"sourcesContent":["import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';\n\n/**\n * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js\n *\n * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes\n * during build.\n * @param {number} code\n */\nfunction formatProdErrorMessage(code) {\n  return \"Minified Redux error #\" + code + \"; visit https://redux.js.org/Errors?code=\" + code + \" for the full message or \" + 'use the non-minified dev environment for full errors. ';\n}\n\n// Inlined version of the `symbol-observable` polyfill\nvar $$observable = (function () {\n  return typeof Symbol === 'function' && Symbol.observable || '@@observable';\n})();\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of\nfunction miniKindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n  var type = typeof val;\n\n  switch (type) {\n    case 'boolean':\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'function':\n      {\n        return type;\n      }\n  }\n\n  if (Array.isArray(val)) return 'array';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  var constructorName = ctorName(val);\n\n  switch (constructorName) {\n    case 'Symbol':\n    case 'Promise':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Map':\n    case 'Set':\n      return constructorName;\n  } // other\n\n\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n}\n\nfunction ctorName(val) {\n  return typeof val.constructor === 'function' ? val.constructor.name : null;\n}\n\nfunction isError(val) {\n  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';\n}\n\nfunction kindOf(val) {\n  var typeOfVal = typeof val;\n\n  if (process.env.NODE_ENV !== 'production') {\n    typeOfVal = miniKindOf(val);\n  }\n\n  return typeOfVal;\n}\n\n/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(0) : 'It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(1) : \"Expected the enhancer to be a function. Instead, received: '\" + kindOf(enhancer) + \"'\");\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(2) : \"Expected the root reducer to be a function. Instead, received: '\" + kindOf(reducer) + \"'\");\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(3) : 'You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(4) : \"Expected the listener to be a function. Instead, received: '\" + kindOf(listener) + \"'\");\n    }\n\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(5) : 'You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(6) : 'You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(7) : \"Actions must be plain objects. Instead, the actual type was: '\" + kindOf(action) + \"'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.\");\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(8) : 'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.');\n    }\n\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(9) : 'Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(10) : \"Expected the nextReducer to be a function. Instead, received: '\" + kindOf(nextReducer));\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(11) : \"Expected the observer to be an object. Instead, received: '\" + kindOf(observer) + \"'\");\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nvar legacy_createStore = createStore;\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + kindOf(inputState) + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(12) : \"The slice reducer for key \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(13) : \"The slice reducer for key \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle '\" + ActionTypes.INIT + \"' or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var actionType = action && action.type;\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(14) : \"When called with an action of type \" + (actionType ? \"\\\"\" + String(actionType) + \"\\\"\" : '(unknown type)') + \", the slice reducer for key \\\"\" + _key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\");\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(16) : \"bindActionCreators expected an object or a function, but instead received: '\" + kindOf(actionCreators) + \"'. \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(15) : 'Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread(_objectSpread({}, store), {}, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore, legacy_createStore };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}